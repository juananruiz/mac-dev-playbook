MacBook-Pro:mac-dev-playbook juananruiz$ ansible-galaxy install -r requirements.yml
- downloading role 'dotfiles', owned by geerlingguy
- downloading role from https://github.com/geerlingguy/ansible-role-dotfiles/archive/1.1.0.tar.gz
- extracting geerlingguy.dotfiles to /Users/juananruiz/repos/mac-dev-playbook/roles/geerlingguy.dotfiles
- geerlingguy.dotfiles (1.1.0) was installed successfully
- downloading role 'homebrew', owned by geerlingguy
- downloading role from https://github.com/geerlingguy/ansible-role-homebrew/archive/2.2.4.tar.gz
- extracting geerlingguy.homebrew to /Users/juananruiz/repos/mac-dev-playbook/roles/geerlingguy.homebrew
- geerlingguy.homebrew (2.2.4) was installed successfully
- adding dependency: elliotweiser.osx-command-line-tools
- downloading role 'mas', owned by geerlingguy
- downloading role from https://github.com/geerlingguy/ansible-role-mas/archive/1.1.0.tar.gz
- extracting geerlingguy.mas to /Users/juananruiz/repos/mac-dev-playbook/roles/geerlingguy.mas
- geerlingguy.mas (1.1.0) was installed successfully
- downloading role 'osx-command-line-tools', owned by elliotweiser
- downloading role from https://github.com/elliotweiser/ansible-osx-command-line-tools/archive/1.2.1.tar.gz
- extracting elliotweiser.osx-command-line-tools to /Users/juananruiz/repos/mac-dev-playbook/roles/elliotweiser.osx-command-line-tools
- elliotweiser.osx-command-line-tools (1.2.1) was installed successfully
MacBook-Pro:mac-dev-playbook juananruiz$ ansible-playbook main.yml -i inventory -K
SUDO password: 

PLAY [all] *************************************************************************************************************************

TASK [Gathering Facts] *************************************************************************************************************
ok: [127.0.0.1]

TASK [include_vars] ****************************************************************************************************************

TASK [elliotweiser.osx-command-line-tools : Am I running on Mac OS X?] *************************************************************
skipping: [127.0.0.1]

TASK [elliotweiser.osx-command-line-tools : Remove existing Command Line Tools installation] ***************************************
skipping: [127.0.0.1]

TASK [elliotweiser.osx-command-line-tools : Check that the Command Line Tools path is present] *************************************
ok: [127.0.0.1]

TASK [elliotweiser.osx-command-line-tools : Is the C++ compiler useable?] **********************************************************
ok: [127.0.0.1]

TASK [elliotweiser.osx-command-line-tools : Check the Command Line Tools package metadata] *****************************************
ok: [127.0.0.1]

TASK [elliotweiser.osx-command-line-tools : Prepare to install Command Line Tools] *************************************************
skipping: [127.0.0.1]

TASK [elliotweiser.osx-command-line-tools : Check for Command Line Tools in Software Update list] **********************************
skipping: [127.0.0.1]

TASK [elliotweiser.osx-command-line-tools : Install Command Line Tools] ************************************************************
skipping: [127.0.0.1]

TASK [geerlingguy.homebrew : Ensure Homebrew parent directory has correct permissions.] ********************************************
changed: [127.0.0.1]

TASK [geerlingguy.homebrew : Ensure Homebrew directory exists.] ********************************************************************
changed: [127.0.0.1]

TASK [geerlingguy.homebrew : Ensure Homebrew is installed.] ************************************************************************
changed: [127.0.0.1]

TASK [geerlingguy.homebrew : Ensure proper permissions and ownership on homebrew_brew_bin_path dirs.] ******************************
changed: [127.0.0.1]

TASK [geerlingguy.homebrew : Ensure proper ownership on homebrew_install_path subdirs.] ********************************************
ok: [127.0.0.1]

TASK [geerlingguy.homebrew : Check if homebrew binary is already in place.] ********************************************************
ok: [127.0.0.1]

TASK [geerlingguy.homebrew : Symlink brew to homebrew_brew_bin_path.] **************************************************************
changed: [127.0.0.1]

TASK [geerlingguy.homebrew : Force update brew after installation.] ****************************************************************
changed: [127.0.0.1]

TASK [geerlingguy.homebrew : Ensure configured taps are tapped.] *******************************************************************
ok: [127.0.0.1] => (item=homebrew/core)
changed: [127.0.0.1] => (item=caskroom/cask)
changed: [127.0.0.1] => (item=homebrew/binary)
changed: [127.0.0.1] => (item=homebrew/dupes)
changed: [127.0.0.1] => (item=homebrew/php)
changed: [127.0.0.1] => (item=homebrew/versions)

TASK [geerlingguy.homebrew : Ensure configured homebrew packages are installed.] ***************************************************
changed: [127.0.0.1] => (item=[u'autoconf', u'bash-completion', u'chromedriver', u'gettext', u'gifsicle', u'git', u'gpg', u'hub', u'httpie', u'iperf', u'libevent', u'sqlite', u'mcrypt', u'nmap', u'npm', u'nvm', u'ssh-copy-id', u'readline', u'openssl', u'pv', u'wget', u'wrk'])

TASK [geerlingguy.homebrew : Ensure blacklisted homebrew packages are not installed.] **********************************************

TASK [geerlingguy.homebrew : Upgrade all homebrew packages (if configured).] *******************************************************
skipping: [127.0.0.1]

TASK [geerlingguy.homebrew : Install configured cask applications.] ****************************************************************
changed: [127.0.0.1] => (item=dropbox)
changed: [127.0.0.1] => (item=evernote)
changed: [127.0.0.1] => (item=firefox)
changed: [127.0.0.1] => (item=google-chrome)
changed: [127.0.0.1] => (item=google-drive)
changed: [127.0.0.1] => (item=handbrake)
changed: [127.0.0.1] => (item=jumpcut)
changed: [127.0.0.1] => (item=licecap)
changed: [127.0.0.1] => (item=macvim)
changed: [127.0.0.1] => (item=nvalt)
changed: [127.0.0.1] => (item=phpstorm)
changed: [127.0.0.1] => (item=sequel-pro)
changed: [127.0.0.1] => (item=skitch)
changed: [127.0.0.1] => (item=slack)
changed: [127.0.0.1] => (item=toggldesktop)
changed: [127.0.0.1] => (item=transmission)
changed: [127.0.0.1] => (item=transmit)
Password:
changed: [127.0.0.1] => (item=vagrant)
changed: [127.0.0.1] => (item=virtualbox)
changed: [127.0.0.1] => (item=vlc)

TASK [geerlingguy.homebrew : Check for Brewfile.] **********************************************************************************
ok: [127.0.0.1]

TASK [geerlingguy.homebrew : Install from Brewfile.] *******************************************************************************
skipping: [127.0.0.1]

TASK [geerlingguy.dotfiles : Ensure dotfiles repository is cloned locally.] ********************************************************
changed: [127.0.0.1]

TASK [geerlingguy.dotfiles : Ensure all configured dotfiles are links.] ************************************************************
[DEPRECATION WARNING]: always_run is deprecated. Use check_mode = no instead..
This feature will be removed in version 2.4. 
Deprecation warnings can be disabled by setting deprecation_warnings=False in ansible.cfg.
ok: [127.0.0.1] => (item=.bash_profile)
ok: [127.0.0.1] => (item=.gitconfig)
ok: [127.0.0.1] => (item=.gitignore)
ok: [127.0.0.1] => (item=.inputrc)
ok: [127.0.0.1] => (item=.osx)
ok: [127.0.0.1] => (item=.vimrc)

TASK [geerlingguy.dotfiles : Remove existing dotfiles file if a replacement is being linked.] **************************************
ok: [127.0.0.1] => (item=(0, {'_ansible_parsed': True, 'stderr_lines': [u'ls: /Users/juananruiz/.bash_profile: No such file or directory'], u'cmd': u'ls -F ~/.bash_profile', u'end': u'2017-05-23 17:57:32.437517', '_ansible_no_log': False, u'stdout': u'', '_ansible_item_result': True, u'changed': False, 'item': u'.bash_profile', u'delta': u'0:00:00.007986', u'stderr': u'ls: /Users/juananruiz/.bash_profile: No such file or directory', u'rc': 1, u'invocation': {u'module_args': {u'creates': None, u'executable': None, u'_uses_shell': True, u'_raw_params': u'ls -F ~/.bash_profile', u'removes': None, u'warn': True, u'chdir': None}}, 'stdout_lines': [], 'failed_when_result': False, u'start': u'2017-05-23 17:57:32.429531', 'failed': False}))
ok: [127.0.0.1] => (item=(1, {'_ansible_parsed': True, 'stderr_lines': [u'ls: /Users/juananruiz/.gitconfig: No such file or directory'], u'cmd': u'ls -F ~/.gitconfig', u'end': u'2017-05-23 17:57:32.636449', '_ansible_no_log': False, u'stdout': u'', '_ansible_item_result': True, u'changed': False, 'item': u'.gitconfig', u'delta': u'0:00:00.006707', u'stderr': u'ls: /Users/juananruiz/.gitconfig: No such file or directory', u'rc': 1, u'invocation': {u'module_args': {u'creates': None, u'executable': None, u'_uses_shell': True, u'_raw_params': u'ls -F ~/.gitconfig', u'removes': None, u'warn': True, u'chdir': None}}, 'stdout_lines': [], 'failed_when_result': False, u'start': u'2017-05-23 17:57:32.629742', 'failed': False}))
ok: [127.0.0.1] => (item=(2, {'_ansible_parsed': True, 'stderr_lines': [u'ls: /Users/juananruiz/.gitignore: No such file or directory'], u'cmd': u'ls -F ~/.gitignore', u'end': u'2017-05-23 17:57:32.832791', '_ansible_no_log': False, u'stdout': u'', '_ansible_item_result': True, u'changed': False, 'item': u'.gitignore', u'delta': u'0:00:00.006853', u'stderr': u'ls: /Users/juananruiz/.gitignore: No such file or directory', u'rc': 1, u'invocation': {u'module_args': {u'creates': None, u'executable': None, u'_uses_shell': True, u'_raw_params': u'ls -F ~/.gitignore', u'removes': None, u'warn': True, u'chdir': None}}, 'stdout_lines': [], 'failed_when_result': False, u'start': u'2017-05-23 17:57:32.825938', 'failed': False}))
ok: [127.0.0.1] => (item=(3, {'_ansible_parsed': True, 'stderr_lines': [u'ls: /Users/juananruiz/.inputrc: No such file or directory'], u'cmd': u'ls -F ~/.inputrc', u'end': u'2017-05-23 17:57:33.033462', '_ansible_no_log': False, u'stdout': u'', '_ansible_item_result': True, u'changed': False, 'item': u'.inputrc', u'delta': u'0:00:00.007084', u'stderr': u'ls: /Users/juananruiz/.inputrc: No such file or directory', u'rc': 1, u'invocation': {u'module_args': {u'creates': None, u'executable': None, u'_uses_shell': True, u'_raw_params': u'ls -F ~/.inputrc', u'removes': None, u'warn': True, u'chdir': None}}, 'stdout_lines': [], 'failed_when_result': False, u'start': u'2017-05-23 17:57:33.026378', 'failed': False}))
ok: [127.0.0.1] => (item=(4, {'_ansible_parsed': True, 'stderr_lines': [u'ls: /Users/juananruiz/.osx: No such file or directory'], u'cmd': u'ls -F ~/.osx', u'end': u'2017-05-23 17:57:33.255539', '_ansible_no_log': False, u'stdout': u'', '_ansible_item_result': True, u'changed': False, 'item': u'.osx', u'delta': u'0:00:00.007138', u'stderr': u'ls: /Users/juananruiz/.osx: No such file or directory', u'rc': 1, u'invocation': {u'module_args': {u'creates': None, u'executable': None, u'_uses_shell': True, u'_raw_params': u'ls -F ~/.osx', u'removes': None, u'warn': True, u'chdir': None}}, 'stdout_lines': [], 'failed_when_result': False, u'start': u'2017-05-23 17:57:33.248401', 'failed': False}))
ok: [127.0.0.1] => (item=(5, {'_ansible_parsed': True, 'stderr_lines': [u'ls: /Users/juananruiz/.vimrc: No such file or directory'], u'cmd': u'ls -F ~/.vimrc', u'end': u'2017-05-23 17:57:33.511740', '_ansible_no_log': False, u'stdout': u'', '_ansible_item_result': True, u'changed': False, 'item': u'.vimrc', u'delta': u'0:00:00.007354', u'stderr': u'ls: /Users/juananruiz/.vimrc: No such file or directory', u'rc': 1, u'invocation': {u'module_args': {u'creates': None, u'executable': None, u'_uses_shell': True, u'_raw_params': u'ls -F ~/.vimrc', u'removes': None, u'warn': True, u'chdir': None}}, 'stdout_lines': [], 'failed_when_result': False, u'start': u'2017-05-23 17:57:33.504386', 'failed': False}))

TASK [geerlingguy.dotfiles : Link dotfiles into home folder.] **********************************************************************
changed: [127.0.0.1] => (item=.bash_profile)
changed: [127.0.0.1] => (item=.gitconfig)
changed: [127.0.0.1] => (item=.gitignore)
changed: [127.0.0.1] => (item=.inputrc)
changed: [127.0.0.1] => (item=.osx)
changed: [127.0.0.1] => (item=.vimrc)

TASK [geerlingguy.mas : Ensure MAS is installed.] **********************************************************************************
skipping: [127.0.0.1]

TASK [geerlingguy.mas : Get MAS account status] ************************************************************************************
skipping: [127.0.0.1]

TASK [geerlingguy.mas : Sign in to MAS when email and password are provided.] ******************************************************
skipping: [127.0.0.1]

TASK [geerlingguy.mas : Sign in to MAS when email is provided, and complete password and 2FA using dialog.] ************************
skipping: [127.0.0.1]

TASK [geerlingguy.mas : List installed MAS apps.] **********************************************************************************
[DEPRECATION WARNING]: always_run is deprecated. Use check_mode = no instead..
This feature will be removed in version 2.4. 
Deprecation warnings can be disabled by setting deprecation_warnings=False in ansible.cfg.
skipping: [127.0.0.1]

TASK [geerlingguy.mas : Ensure configured MAS apps are installed.] *****************************************************************

TASK [geerlingguy.mas : Upgrade all apps (if configured).] *************************************************************************
skipping: [127.0.0.1]

TASK [Ensure Ansible downloads directory exists.] **********************************************************************************
changed: [127.0.0.1]

TASK [Ensure /etc/ansible directory exists.] ***************************************************************************************
changed: [127.0.0.1]

TASK [Symlink /usr/local/etc/ansible to /etc/ansible.] *****************************************************************************
changed: [127.0.0.1]

TASK [Copy sudoers configuration into place.] **************************************************************************************
changed: [127.0.0.1]

TASK [Get current Terminal profile.] ***********************************************************************************************
[DEPRECATION WARNING]: always_run is deprecated. Use check_mode = no instead..
This feature will be removed in version 2.4. 
Deprecation warnings can be disabled by setting deprecation_warnings=False in ansible.cfg.
ok: [127.0.0.1]

TASK [Ensure custom Terminal profile is added.] ************************************************************************************
ok: [127.0.0.1]

TASK [Ensure custom Terminal profile is set as default.] ***************************************************************************
ok: [127.0.0.1] => (item=defaults write com.apple.terminal 'Default Window Settings' -string JJG-Term)
ok: [127.0.0.1] => (item=defaults write com.apple.terminal 'Startup Window Settings' -string JJG-Term)

TASK [Run .osx dotfiles.] **********************************************************************************************************
ok: [127.0.0.1]

PLAY RECAP *************************************************************************************************************************
127.0.0.1                  : ok=28   changed=15   unreachable=0    failed=0 }}}}}}}}}}}}}}}}}}
